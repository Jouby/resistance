import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class I18n {
  String get resist => _getText("resist");

  String get resist_desc => _getText("resist_desc");

  String get spy => _getText("spy");

  String get spy_desc => _getText("spy_desc");

  static Map<String, String> _localizedValues;

  static Map<String, String> _frValues = {
    "resist": "Résistant",
    "resist_desc":
        "Résistant: Vous devez trouver les espions qui se cache par les résistants et faire réussir les missions",
    "spy": "Espion",
    "spy_desc":
        "Espion: Vous devez faire passer pour un résistant et faire échouer les missions",
  };

  static Map<String, Map<String, String>> _allValues = {
    "fr": _frValues,
  };

  I18n(Locale locale) {
    this._locale = locale;
    _localizedValues = null;
  }

  Locale _locale;

  static I18n of(BuildContext context) {
    return Localizations.of<I18n>(context, I18n);
  }

  String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  Locale get currentLocale => _locale;

  String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('fr'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
